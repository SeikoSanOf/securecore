import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  Shield, 
  ExternalLink, 
  Target, 
  Zap, 
  AlertTriangle,
  CheckCircle,
  Info
} from 'lucide-react';

interface ExploitRecommendation {
  id: string;
  name: string;
  category: 'web' | 'network' | 'auth' | 'system' | 'social';
  severity: 'low' | 'medium' | 'high' | 'critical';
  cve?: string;
  description: string;
  prerequisites: string[];
  steps: string[];
  mitigations: string[];
  tools: string[];
  external_services?: {
    name: string;
    url: string;
    type: 'scanner' | 'exploit_db' | 'payload_gen' | 'framework';
  }[];
}

interface ExploitRecommendationEngineProps {
  findings: any[];
  target: string;
  scanType: string;
}

const ExploitRecommendationEngine = ({ findings, target, scanType }: ExploitRecommendationEngineProps) => {
  const [recommendations, setRecommendations] = useState<ExploitRecommendation[]>([]);
  const [selectedExploit, setSelectedExploit] = useState<ExploitRecommendation | null>(null);

  useEffect(() => {
    generateRecommendations();
  }, [findings, target, scanType]);

  const generateRecommendations = () => {
    const recs: ExploitRecommendation[] = [];

    // Analyze findings and generate contextual exploit recommendations
    findings.forEach(finding => {
      switch (finding.type) {
        case 'open_port':
          if (finding.service === 'SSH' && finding.port === 22) {
            recs.push({
              id: 'ssh_bruteforce',
              name: 'SSH Credential Brute Force',
              category: 'auth',
              severity: 'high',
              description: 'SSH service detected. Potential for credential brute force attacks.',
              prerequisites: ['Network access to port 22', 'Username/password wordlists'],
              steps: [
                'Enumerate valid usernames using SSH user enumeration',
                'Use Hydra or Medusa for credential brute force',
                'Try default credentials for identified services',
                'Attempt SSH key-based authentication if keys are discovered'
              ],
              mitigations: [
                'Implement SSH key-based authentication',
                'Use fail2ban or similar intrusion prevention',
                'Change default SSH port',
                'Implement strong password policies',
                'Enable SSH rate limiting'
              ],
              tools: ['hydra', 'medusa', 'ncrack', 'patator'],
              external_services: [
                {
                  name: 'Exploit-DB SSH Exploits',
                  url: 'https://www.exploit-db.com/search?q=ssh',
                  type: 'exploit_db'
                },
                {
                  name: 'Metasploit SSH Modules',
                  url: 'https://www.rapid7.com/db/?q=ssh&type=metasploit',
                  type: 'framework'
                }
              ]
            });
          }
          
          if (finding.service === 'HTTP' || finding.service === 'HTTPS') {
            recs.push({
              id: 'web_vulnerability_scan',
              name: 'Web Application Security Testing',
              category: 'web',
              severity: 'medium',
              description: 'Web service detected. Comprehensive web application testing recommended.',
              prerequisites: ['Network access to web service', 'Web application enumeration'],
              steps: [
                'Perform directory and file enumeration',
                'Test for SQL injection vulnerabilities',
                'Check for XSS vulnerabilities',
                'Analyze authentication mechanisms',
                'Test for file upload vulnerabilities',
                'Check for business logic flaws'
              ],
              mitigations: [
                'Input validation and sanitization',
                'Use parameterized queries',
                'Implement proper authentication',
                'Regular security updates',
                'Web Application Firewall (WAF)'
              ],
              tools: ['sqlmap', 'burp-suite', 'owasp-zap', 'nikto', 'gobuster'],
              external_services: [
                {
                  name: 'OWASP WebGoat',
                  url: 'https://webgoat.github.io/WebGoat/',
                  type: 'scanner'
                },
                {
                  name: 'PortSwigger Web Security Academy',
                  url: 'https://portswigger.net/web-security',
                  type: 'framework'
                }
              ]
            });
          }
          break;

        case 'sql_injection':
          recs.push({
            id: 'sql_injection_exploit',
            name: 'SQL Injection Exploitation',
            category: 'web',
            severity: 'critical',
            cve: 'CWE-89',
            description: 'SQL injection vulnerability detected. Critical exploitation path available.',
            prerequisites: ['Vulnerable SQL injection point', 'Database enumeration'],
            steps: [
              'Verify and confirm SQL injection vulnerability',
              'Enumerate database structure and version',
              'Extract sensitive data from database',
              'Attempt privilege escalation within database',
              'Test for file system access via SQL functions',
              'Consider OS command injection possibilities'
            ],
            mitigations: [
              'Use parameterized queries/prepared statements',
              'Input validation and encoding',
              'Principle of least privilege for database accounts',
              'Regular security code reviews',
              'Web Application Firewall with SQL injection rules'
            ],
            tools: ['sqlmap', 'burp-suite', 'manual-testing'],
            external_services: [
              {
                name: 'SQLMap Online',
                url: 'https://sqlmap.org/',
                type: 'framework'
              },
              {
                name: 'PayloadsAllTheThings SQL Injection',
                url: 'https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection',
                type: 'payload_gen'
              }
            ]
          });
          break;

        case 'missing_header':
          if (finding.header === 'Content-Security-Policy') {
            recs.push({
              id: 'xss_exploitation',
              name: 'Cross-Site Scripting (XSS) Testing',
              category: 'web',
              severity: 'high',
              cve: 'CWE-79',
              description: 'Missing CSP header increases XSS vulnerability risk.',
              prerequisites: ['User input fields', 'Lack of input sanitization'],
              steps: [
                'Identify input vectors (forms, URL parameters, headers)',
                'Test for reflected XSS vulnerabilities',
                'Test for stored XSS vulnerabilities',
                'Test for DOM-based XSS vulnerabilities',
                'Develop exploit payloads for identified vulnerabilities'
              ],
              mitigations: [
                'Implement Content Security Policy (CSP)',
                'Input validation and output encoding',
                'Use HTTP-only cookies',
                'Regular security testing',
                'Security awareness training'
              ],
              tools: ['burp-suite', 'owasp-zap', 'xsshunter', 'beef'],
              external_services: [
                {
                  name: 'XSS Hunter',
                  url: 'https://xsshunter.com/',
                  type: 'scanner'
                },
                {
                  name: 'OWASP XSS Prevention Cheat Sheet',
                  url: 'https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html',
                  type: 'framework'
                }
              ]
            });
          }
          break;

        case 'outdated_software':
          recs.push({
            id: 'cve_exploitation',
            name: 'Known CVE Exploitation',
            category: 'system',
            severity: 'critical',
            description: `Outdated software detected: ${finding.software}. Known CVE exploitation possible.`,
            prerequisites: ['Identified software version', 'Public exploit availability'],
            steps: [
              'Search for CVE database for specific software version',
              'Download and customize public exploits',
              'Test exploits in controlled environment',
              'Execute exploitation with proper authorization',
              'Document successful exploitation methods'
            ],
            mitigations: [
              'Regular software updates and patching',
              'Vulnerability management program',
              'Network segmentation',
              'Intrusion detection systems',
              'Asset inventory and monitoring'
            ],
            tools: ['metasploit', 'exploit-db', 'searchsploit', 'nuclei'],
            external_services: [
              {
                name: 'Exploit Database',
                url: 'https://www.exploit-db.com/',
                type: 'exploit_db'
              },
              {
                name: 'CVE Details',
                url: 'https://www.cvedetails.com/',
                type: 'scanner'
              },
              {
                name: 'Metasploit Rapid7',
                url: 'https://www.metasploit.com/',
                type: 'framework'
              }
            ]
          });
          break;
      }
    });

    // Add general recommendations based on scan type
    if (scanType === 'nmap_basic' || scanType === 'nmap_comprehensive') {
      recs.push({
        id: 'network_pivoting',
        name: 'Network Pivoting & Lateral Movement',
        category: 'network',
        severity: 'medium',
        description: 'Network enumeration completed. Consider lateral movement techniques.',
        prerequisites: ['Initial network access', 'Host enumeration'],
        steps: [
          'Map internal network topology',
          'Identify trust relationships between hosts',
          'Enumerate domain controllers and critical servers',
          'Test for shared credentials across systems',
          'Implement persistence mechanisms'
        ],
        mitigations: [
          'Network segmentation and VLANs',
          'Zero-trust network architecture',
          'Regular credential rotation',
          'Endpoint detection and response (EDR)',
          'Network monitoring and logging'
        ],
        tools: ['metasploit', 'cobalt-strike', 'empire', 'bloodhound'],
        external_services: [
          {
            name: 'MITRE ATT&CK Framework',
            url: 'https://attack.mitre.org/',
            type: 'framework'
          },
          {
            name: 'Living Off The Land Binaries',
            url: 'https://lolbas-project.github.io/',
            type: 'payload_gen'
          }
        ]
      });
    }

    setRecommendations(recs);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-500/10 text-red-500 border-red-500/20';
      case 'high': return 'bg-orange-500/10 text-orange-500 border-orange-500/20';
      case 'medium': return 'bg-yellow-500/10 text-yellow-500 border-yellow-500/20';
      default: return 'bg-green-500/10 text-green-500 border-green-500/20';
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'web': return <Shield className="w-4 h-4" />;
      case 'network': return <Target className="w-4 h-4" />;
      case 'auth': return <CheckCircle className="w-4 h-4" />;
      case 'system': return <Zap className="w-4 h-4" />;
      default: return <Info className="w-4 h-4" />;
    }
  };

  if (recommendations.length === 0) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Shield className="w-5 h-5" />
            <span>Exploit Recommendations</span>
          </CardTitle>
          <CardDescription>
            No specific exploit recommendations available for current findings.
          </CardDescription>
        </CardHeader>
      </Card>
    );
  }

  return (
    <div className="space-y-4">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Zap className="w-5 h-5 text-cyber-red" />
            <span>Exploit Recommendations</span>
          </CardTitle>
          <CardDescription>
            Contextual exploitation paths based on discovered vulnerabilities
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Alert className="mb-4">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>
              These recommendations are for authorized penetration testing only. 
              Ensure proper authorization before attempting any exploits.
            </AlertDescription>
          </Alert>
          
          <div className="grid gap-4">
            {recommendations.map((rec) => (
              <div key={rec.id} className="border rounded-lg p-4 space-y-3">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-2">
                      {getCategoryIcon(rec.category)}
                      <h3 className="font-semibold">{rec.name}</h3>
                      <Badge className={getSeverityColor(rec.severity)}>
                        {rec.severity.toUpperCase()}
                      </Badge>
                      {rec.cve && (
                        <Badge variant="outline">{rec.cve}</Badge>
                      )}
                    </div>
                    <p className="text-sm text-muted-foreground mb-3">{rec.description}</p>
                    
                    <div className="flex flex-wrap gap-2 mb-3">
                      {rec.tools.map((tool) => (
                        <Badge key={tool} variant="secondary" className="text-xs">
                          {tool}
                        </Badge>
                      ))}
                    </div>
                  </div>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setSelectedExploit(selectedExploit?.id === rec.id ? null : rec)}
                  >
                    {selectedExploit?.id === rec.id ? 'Hide Details' : 'View Details'}
                  </Button>
                </div>
                
                {selectedExploit?.id === rec.id && (
                  <div className="space-y-4 pt-4 border-t">
                    <div>
                      <h4 className="font-medium mb-2">Prerequisites:</h4>
                      <ul className="text-sm text-muted-foreground space-y-1">
                        {rec.prerequisites.map((prereq, index) => (
                          <li key={index} className="flex items-start space-x-2">
                            <span className="text-cyber-blue">•</span>
                            <span>{prereq}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                    
                    <div>
                      <h4 className="font-medium mb-2">Exploitation Steps:</h4>
                      <ol className="text-sm text-muted-foreground space-y-1">
                        {rec.steps.map((step, index) => (
                          <li key={index} className="flex items-start space-x-2">
                            <span className="text-cyber-red font-mono">{index + 1}.</span>
                            <span>{step}</span>
                          </li>
                        ))}
                      </ol>
                    </div>
                    
                    <div>
                      <h4 className="font-medium mb-2">Mitigations:</h4>
                      <ul className="text-sm text-muted-foreground space-y-1">
                        {rec.mitigations.map((mitigation, index) => (
                          <li key={index} className="flex items-start space-x-2">
                            <span className="text-cyber-green">✓</span>
                            <span>{mitigation}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                    
                    {rec.external_services && rec.external_services.length > 0 && (
                      <div>
                        <h4 className="font-medium mb-2">External Resources:</h4>
                        <div className="flex flex-wrap gap-2">
                          {rec.external_services.map((service, index) => (
                            <Button
                              key={index}
                              variant="outline"
                              size="sm"
                              onClick={() => window.open(service.url, '_blank')}
                              className="text-xs"
                            >
                              <ExternalLink className="w-3 h-3 mr-1" />
                              {service.name}
                            </Button>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default ExploitRecommendationEngine;
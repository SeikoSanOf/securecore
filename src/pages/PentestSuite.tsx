import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { useToast } from '@/hooks/use-toast';
import { 
  Target, 
  Plus, 
  Play, 
  Download, 
  Eye, 
  Shield, 
  AlertTriangle,
  CheckCircle,
  Clock,
  Info,
  ExternalLink
} from 'lucide-react';

interface PentestReport {
  id: string;
  target: string;
  scanType: string;
  status: 'pending' | 'running' | 'completed' | 'failed';
  severity: 'low' | 'medium' | 'high' | 'critical';
  createdAt: Date;
  completedAt?: Date;
  findings: any[];
  summary: string;
}

const scanTypes = [
  { 
    id: 'port_scan', 
    name: 'Port Scanner', 
    description: 'Basic port enumeration (non-intrusive)',
    passive: false
  },
  { 
    id: 'ssl_check', 
    name: 'SSL/TLS Analysis', 
    description: 'Certificate and encryption analysis',
    passive: true
  },
  { 
    id: 'dns_enum', 
    name: 'DNS Enumeration', 
    description: 'DNS record and subdomain discovery',
    passive: true
  },
  { 
    id: 'http_headers', 
    name: 'HTTP Headers Check', 
    description: 'Security headers analysis',
    passive: true
  },
  { 
    id: 'whois_lookup', 
    name: 'WHOIS Lookup', 
    description: 'Domain registration information',
    passive: true
  },
  { 
    id: 'vulnerability_scan', 
    name: 'Vulnerability Scan', 
    description: 'Basic vulnerability detection (authorized only)',
    passive: false
  }
];

const PentestSuite = () => {
  const [reports, setReports] = useState<PentestReport[]>([]);
  const [isCreatingScan, setIsCreatingScan] = useState(false);
  const [selectedReport, setSelectedReport] = useState<PentestReport | null>(null);
  const [consentGiven, setConsentGiven] = useState(false);
  const { toast } = useToast();

  const [newScan, setNewScan] = useState({
    target: '',
    scanType: ''
  });

  useEffect(() => {
    // Load reports from localStorage
    const storedReports = localStorage.getItem('sentryos_pentest_reports');
    if (storedReports) {
      const parsed = JSON.parse(storedReports);
      setReports(parsed.map((r: any) => ({ 
        ...r, 
        createdAt: new Date(r.createdAt),
        completedAt: r.completedAt ? new Date(r.completedAt) : undefined
      })));
    }
  }, []);

  const saveReports = (newReports: PentestReport[]) => {
    localStorage.setItem('sentryos_pentest_reports', JSON.stringify(newReports));
    setReports(newReports);
  };

  const createScan = () => {
    if (!newScan.target || !newScan.scanType) {
      toast({
        title: "Validation Error",
        description: "Please fill in all required fields",
        variant: "destructive"
      });
      return;
    }

    const selectedScanType = scanTypes.find(s => s.id === newScan.scanType);
    if (!selectedScanType?.passive && !consentGiven) {
      toast({
        title: "Authorization Required",
        description: "Active scans require explicit consent and authorization",
        variant: "destructive"
      });
      return;
    }

    const report: PentestReport = {
      id: Math.random().toString(36),
      target: newScan.target,
      scanType: newScan.scanType,
      status: 'pending',
      severity: 'low',
      createdAt: new Date(),
      findings: [],
      summary: ''
    };

    const updatedReports = [report, ...reports];
    saveReports(updatedReports);
    
    setNewScan({ target: '', scanType: '' });
    setIsCreatingScan(false);
    setConsentGiven(false);

    // Simulate scan execution
    setTimeout(() => runScan(report.id), 1000);

    toast({
      title: "Pentest Scan Initiated",
      description: "Security assessment has been queued",
    });
  };

  const runScan = (reportId: string) => {
    const reportIndex = reports.findIndex(r => r.id === reportId);
    if (reportIndex === -1) return;

    // Update to running
    const runningReports = [...reports];
    runningReports[reportIndex] = { ...runningReports[reportIndex], status: 'running' };
    saveReports(runningReports);

    // Simulate completion after random time
    setTimeout(() => {
      const completedReports = [...reports];
      const report = completedReports[reportIndex];
      
      // Generate mock findings based on scan type
      const mockFindings = generateMockFindings(report.scanType, report.target);
      const severity = calculateSeverity(mockFindings);
      
      completedReports[reportIndex] = { 
        ...report, 
        status: 'completed',
        completedAt: new Date(),
        findings: mockFindings,
        severity,
        summary: generateSummary(mockFindings, severity)
      };
      
      saveReports(completedReports);
      
      toast({
        title: "Pentest Scan Completed",
        description: `Security assessment for "${report.target}" has finished`,
      });
    }, Math.random() * 8000 + 5000);
  };

  const generateMockFindings = (scanType: string, target: string) => {
    const findings = [];

    switch (scanType) {
      case 'port_scan':
        findings.push(
          { type: 'open_port', port: 80, service: 'HTTP', severity: 'low' },
          { type: 'open_port', port: 443, service: 'HTTPS', severity: 'low' },
          { type: 'open_port', port: 22, service: 'SSH', severity: 'medium' }
        );
        break;
      case 'ssl_check':
        findings.push(
          { type: 'ssl_cert', valid: true, expiry: '2025-12-31', severity: 'low' },
          { type: 'weak_cipher', cipher: 'TLSv1.0', severity: 'medium' }
        );
        break;
      case 'http_headers':
        findings.push(
          { type: 'missing_header', header: 'X-Frame-Options', severity: 'medium' },
          { type: 'missing_header', header: 'Content-Security-Policy', severity: 'high' }
        );
        break;
      case 'dns_enum':
        findings.push(
          { type: 'subdomain', domain: `mail.${target}`, severity: 'low' },
          { type: 'subdomain', domain: `admin.${target}`, severity: 'medium' }
        );
        break;
      case 'vulnerability_scan':
        findings.push(
          { type: 'outdated_software', software: 'Apache 2.4.29', severity: 'high' },
          { type: 'sql_injection', endpoint: '/login', severity: 'critical' }
        );
        break;
      default:
        findings.push({ type: 'info', message: 'Basic scan completed', severity: 'low' });
    }

    return findings;
  };

  const calculateSeverity = (findings: any[]): 'low' | 'medium' | 'high' | 'critical' => {
    if (findings.some(f => f.severity === 'critical')) return 'critical';
    if (findings.some(f => f.severity === 'high')) return 'high';
    if (findings.some(f => f.severity === 'medium')) return 'medium';
    return 'low';
  };

  const generateSummary = (findings: any[], severity: string) => {
    const count = findings.length;
    return `Scan completed with ${count} finding(s). Overall risk level: ${severity.toUpperCase()}. Review detailed findings for remediation recommendations.`;
  };

  const exportReport = (report: PentestReport) => {
    const data = JSON.stringify({
      report: {
        target: report.target,
        scanType: report.scanType,
        severity: report.severity,
        createdAt: report.createdAt,
        completedAt: report.completedAt,
        summary: report.summary
      },
      findings: report.findings
    }, null, 2);
    
    const blob = new Blob([data], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `pentest-${report.target.replace(/[^a-zA-Z0-9]/g, '-')}-${report.id}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Report Exported",
      description: "Pentest report exported successfully",
    });
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed':
        return <CheckCircle className="w-4 h-4 text-cyber-green" />;
      case 'running':
        return <div className="w-4 h-4 border-2 border-cyber-blue border-t-transparent rounded-full animate-spin" />;
      case 'failed':
        return <AlertTriangle className="w-4 h-4 text-cyber-red" />;
      default:
        return <Clock className="w-4 h-4 text-cyber-orange" />;
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical':
        return 'text-cyber-red border-cyber-red';
      case 'high':
        return 'text-cyber-orange border-cyber-orange';
      case 'medium':
        return 'text-cyber-blue border-cyber-blue';
      default:
        return 'text-cyber-green border-cyber-green';
    }
  };

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="space-y-1">
          <h1 className="text-3xl font-bold flex items-center space-x-2">
            <Target className="w-8 h-8 text-cyber-red" />
            <span>Pentest Suite</span>
          </h1>
          <p className="text-muted-foreground">Authorized security testing and vulnerability assessment</p>
        </div>
        <Dialog open={isCreatingScan} onOpenChange={setIsCreatingScan}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="w-4 h-4 mr-2" />
              New Scan
            </Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Create Security Scan</DialogTitle>
              <DialogDescription>
                Initialize a new penetration test or security assessment
              </DialogDescription>
            </DialogHeader>
            <div className="space-y-4">
              <Alert>
                <AlertTriangle className="h-4 w-4" />
                <AlertDescription>
                  Only scan systems you own or have explicit authorization to test. Unauthorized security testing is illegal.
                </AlertDescription>
              </Alert>
              
              <div className="space-y-2">
                <Label htmlFor="scan-target">Target *</Label>
                <Input
                  id="scan-target"
                  placeholder="e.g., example.com, 192.168.1.100"
                  value={newScan.target}
                  onChange={(e) => setNewScan({...newScan, target: e.target.value})}
                />
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="scan-type">Scan Type *</Label>
                <Select value={newScan.scanType} onValueChange={(value) => setNewScan({...newScan, scanType: value})}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select scan type" />
                  </SelectTrigger>
                  <SelectContent>
                    {scanTypes.map((scan) => (
                      <SelectItem key={scan.id} value={scan.id}>
                        <div className="flex items-center space-x-2">
                          <div>
                            <div className="flex items-center space-x-2">
                              <span>{scan.name}</span>
                              <Badge variant={scan.passive ? "default" : "secondary"}>
                                {scan.passive ? "Passive" : "Active"}
                              </Badge>
                            </div>
                            <span className="text-xs text-muted-foreground">{scan.description}</span>
                          </div>
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {newScan.scanType && !scanTypes.find(s => s.id === newScan.scanType)?.passive && (
                <div className="space-y-3 p-4 border rounded-lg bg-destructive/5">
                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id="consent"
                      checked={consentGiven}
                      onChange={(e) => setConsentGiven(e.target.checked)}
                      className="rounded"
                    />
                    <Label htmlFor="consent" className="text-sm">
                      I confirm that I have explicit authorization to perform active security testing on this target
                    </Label>
                  </div>
                </div>
              )}
              
              <div className="flex justify-end space-x-2">
                <Button variant="outline" onClick={() => setIsCreatingScan(false)}>
                  Cancel
                </Button>
                <Button onClick={createScan}>Create Scan</Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-lg">Total Scans</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-cyber-red">{reports.length}</div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-lg">Critical Findings</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-cyber-red">
              {reports.filter(r => r.severity === 'critical').length}
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-lg">High Risk</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-cyber-orange">
              {reports.filter(r => r.severity === 'high').length}
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-lg">Active Scans</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-cyber-blue">
              {reports.filter(r => r.status === 'running').length}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Reports List */}
      <Card>
        <CardHeader>
          <CardTitle>Security Reports</CardTitle>
          <CardDescription>Penetration test results and vulnerability assessments</CardDescription>
        </CardHeader>
        <CardContent>
          {reports.length === 0 ? (
            <div className="text-center py-8">
              <Shield className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
              <h3 className="text-lg font-semibold mb-2">No security scans yet</h3>
              <p className="text-muted-foreground mb-4">Start your first authorized security assessment</p>
              <Button onClick={() => setIsCreatingScan(true)}>
                <Plus className="w-4 h-4 mr-2" />
                Create First Scan
              </Button>
            </div>
          ) : (
            <div className="space-y-4">
              {reports.map((report) => {
                const scanType = scanTypes.find(s => s.id === report.scanType);
                return (
                  <div key={report.id} className="border rounded-lg p-4 space-y-3">
                    <div className="flex items-center justify-between">
                      <div className="flex-1">
                        <div className="flex items-center space-x-2">
                          <h3 className="font-semibold font-mono">{report.target}</h3>
                          <Badge variant="outline" className={getSeverityColor(report.severity)}>
                            {report.severity.toUpperCase()}
                          </Badge>
                          <Badge variant={report.status === 'completed' ? 'default' : 'secondary'}>
                            {report.status}
                          </Badge>
                        </div>
                        <p className="text-sm text-muted-foreground">
                          Scan: {scanType?.name || report.scanType}
                        </p>
                        {report.summary && (
                          <p className="text-sm text-muted-foreground mt-1">{report.summary}</p>
                        )}
                      </div>
                      <div className="flex items-center space-x-2">
                        {getStatusIcon(report.status)}
                        {report.status === 'completed' && (
                          <>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => setSelectedReport(report)}
                            >
                              <Eye className="w-4 h-4" />
                            </Button>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => exportReport(report)}
                            >
                              <Download className="w-4 h-4" />
                            </Button>
                          </>
                        )}
                        {report.status === 'pending' && (
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => runScan(report.id)}
                          >
                            <Play className="w-4 h-4" />
                          </Button>
                        )}
                      </div>
                    </div>
                    <div className="flex items-center justify-between text-xs text-muted-foreground">
                      <span>Created: {report.createdAt.toLocaleString()}</span>
                      {report.completedAt && (
                        <span>Completed: {report.completedAt.toLocaleString()}</span>
                      )}
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Report Details Dialog */}
      <Dialog open={!!selectedReport} onOpenChange={() => setSelectedReport(null)}>
        <DialogContent className="max-w-4xl">
          <DialogHeader>
            <DialogTitle>Security Report: {selectedReport?.target}</DialogTitle>
            <DialogDescription>
              Detailed findings and recommendations
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            {selectedReport && (
              <>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label className="text-sm font-semibold">Severity</Label>
                    <p className={`font-mono ${getSeverityColor(selectedReport.severity).split(' ')[0]}`}>
                      {selectedReport.severity.toUpperCase()}
                    </p>
                  </div>
                  <div>
                    <Label className="text-sm font-semibold">Findings Count</Label>
                    <p className="font-mono">{selectedReport.findings.length}</p>
                  </div>
                </div>

                <div className="space-y-3">
                  <Label className="text-sm font-semibold">Summary</Label>
                  <p className="text-sm bg-muted p-3 rounded">{selectedReport.summary}</p>
                </div>

                <div className="space-y-3">
                  <Label className="text-sm font-semibold">Detailed Findings</Label>
                  <div className="font-mono text-sm bg-terminal-bg text-terminal-text p-4 rounded-lg overflow-auto max-h-96">
                    <pre>{JSON.stringify(selectedReport.findings, null, 2)}</pre>
                  </div>
                </div>

                <div className="flex justify-end space-x-2">
                  <Button
                    variant="outline"
                    onClick={() => exportReport(selectedReport)}
                  >
                    <Download className="w-4 h-4 mr-2" />
                    Export Report
                  </Button>
                  <Button onClick={() => setSelectedReport(null)}>
                    Close
                  </Button>
                </div>
              </>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default PentestSuite;
import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { useToast } from '@/hooks/use-toast';
import { 
  Target, 
  Plus, 
  Play, 
  Download, 
  Eye, 
  Shield, 
  AlertTriangle,
  CheckCircle,
  Clock,
  Info,
  ExternalLink,
  Terminal,
  Settings,
  Zap
} from 'lucide-react';
import ReverseShellGenerator from '@/components/ReverseShellGenerator';
import ExploitRecommendationEngine from '@/components/ExploitRecommendationEngine';
import AdvancedToolsPanel from '@/components/AdvancedToolsPanel';

interface PentestReport {
  id: string;
  target: string;
  scanType: string;
  status: 'pending' | 'running' | 'completed' | 'failed';
  severity: 'low' | 'medium' | 'high' | 'critical';
  createdAt: Date;
  completedAt?: Date;
  findings: any[];
  summary: string;
  exploitRecommendations?: any[];
  toolsUsed?: string[];
  commandsExecuted?: string[];
}

const scanTypes = [
  // Network Discovery & Port Scanning
  { 
    id: 'nmap_basic', 
    name: 'Nmap - Basic Port Scan', 
    description: 'TCP SYN scan on common ports',
    passive: false,
    category: 'network',
    tools: ['nmap'],
    command: 'nmap -sS -F {{target}}'
  },
  { 
    id: 'nmap_comprehensive', 
    name: 'Nmap - Comprehensive Scan', 
    description: 'Service detection, OS fingerprinting, scripts',
    passive: false,
    category: 'network',
    tools: ['nmap'],
    command: 'nmap -sS -sV -O -A --script=default {{target}}'
  },
  { 
    id: 'nmap_stealth', 
    name: 'Nmap - Stealth Scan', 
    description: 'Slow, fragmented packets to avoid detection',
    passive: false,
    category: 'network',
    tools: ['nmap'],
    command: 'nmap -sS -f -T1 -D RND:10 {{target}}'
  },
  
  // OSINT & Information Gathering
  { 
    id: 'spiderfoot', 
    name: 'SpiderFoot - Full OSINT', 
    description: 'Automated OSINT and entity enumeration',
    passive: true,
    category: 'osint',
    tools: ['spiderfoot'],
    command: 'spiderfoot -s {{target}} -t all'
  },
  { 
    id: 'recon_ng', 
    name: 'Recon-ng - Modular OSINT', 
    description: 'Python-based OSINT framework',
    passive: true,
    category: 'osint',
    tools: ['recon-ng'],
    command: 'recon-ng -w {{target}} -m all'
  },
  { 
    id: 'metagoofil', 
    name: 'Metagoofil - Metadata Extraction', 
    description: 'Extract metadata from public documents',
    passive: true,
    category: 'osint',
    tools: ['metagoofil'],
    command: 'metagoofil -d {{target}} -t pdf,doc,xls,ppt -l 100'
  },
  { 
    id: 'haveibeenpwned', 
    name: 'Breach Database Check', 
    description: 'Check for compromised credentials via API',
    passive: true,
    category: 'osint',
    tools: ['haveibeenpwned-api'],
    command: 'API call to HaveIBeenPwned'
  },

  // Web Application Testing
  { 
    id: 'sqlmap', 
    name: 'SQLMap - SQL Injection', 
    description: 'Automated SQL injection detection and exploitation',
    passive: false,
    category: 'web',
    tools: ['sqlmap'],
    command: 'sqlmap -u {{target}} --batch --risk=1 --level=1'
  },
  { 
    id: 'ssl_check', 
    name: 'SSL/TLS Analysis', 
    description: 'Certificate and encryption analysis',
    passive: true,
    category: 'web',
    tools: ['testssl'],
    command: 'testssl {{target}}'
  },
  { 
    id: 'http_headers', 
    name: 'HTTP Security Headers', 
    description: 'Security headers analysis',
    passive: true,
    category: 'web',
    tools: ['curl'],
    command: 'curl -I {{target}}'
  },

  // Authentication & Password Testing
  { 
    id: 'hydra_ssh', 
    name: 'Hydra - SSH Brute Force', 
    description: 'SSH credential brute force attack',
    passive: false,
    category: 'auth',
    tools: ['hydra'],
    command: 'hydra -L users.txt -P passwords.txt ssh://{{target}}'
  },
  { 
    id: 'medusa_ftp', 
    name: 'Medusa - FTP Brute Force', 
    description: 'FTP credential brute force attack',
    passive: false,
    category: 'auth',
    tools: ['medusa'],
    command: 'medusa -h {{target}} -U users.txt -P passwords.txt -M ftp'
  },
  { 
    id: 'john_crack', 
    name: 'John the Ripper - Hash Cracking', 
    description: 'Password hash cracking',
    passive: false,
    category: 'auth',
    tools: ['john'],
    command: 'john --wordlist=rockyou.txt hashes.txt'
  },
  { 
    id: 'hashcat_gpu', 
    name: 'Hashcat - GPU Hash Cracking', 
    description: 'GPU-accelerated password hash cracking',
    passive: false,
    category: 'auth',
    tools: ['hashcat'],
    command: 'hashcat -m 0 -a 0 hashes.txt rockyou.txt'
  },

  // Network Analysis & Sniffing
  { 
    id: 'wireshark_capture', 
    name: 'Wireshark - Packet Capture', 
    description: 'Network traffic capture and analysis',
    passive: false,
    category: 'network',
    tools: ['wireshark', 'tcpdump'],
    command: 'tcpdump -i eth0 -s 0 -w capture.pcap'
  },
  
  // Exploitation Frameworks
  { 
    id: 'metasploit_scan', 
    name: 'Metasploit - Vulnerability Scan', 
    description: 'Metasploit framework vulnerability detection',
    passive: false,
    category: 'exploit',
    tools: ['metasploit'],
    command: 'msfconsole -q -x "use auxiliary/scanner/portscan/tcp; set RHOSTS {{target}}; run"'
  },
  
  // DNS & Domain Analysis
  { 
    id: 'dns_enum', 
    name: 'DNS Enumeration', 
    description: 'DNS record and subdomain discovery',
    passive: true,
    category: 'network',
    tools: ['dig', 'nslookup'],
    command: 'dig {{target}} ANY'
  },
  { 
    id: 'whois_lookup', 
    name: 'WHOIS Lookup', 
    description: 'Domain registration information',
    passive: true,
    category: 'osint',
    tools: ['whois'],
    command: 'whois {{target}}'
  },

  // Reverse Shells & Payloads
  { 
    id: 'reverse_shell', 
    name: 'Reverse Shell Generator', 
    description: 'Generate reverse shell payloads (authorized testing only)',
    passive: false,
    category: 'exploit',
    tools: ['custom'],
    command: 'Custom payload generator'
  }
];

const PentestSuite = () => {
  const [reports, setReports] = useState<PentestReport[]>([]);
  const [isCreatingScan, setIsCreatingScan] = useState(false);
  const [selectedReport, setSelectedReport] = useState<PentestReport | null>(null);
  const [consentGiven, setConsentGiven] = useState(false);
  const [showReverseShell, setShowReverseShell] = useState(false);
  const [showAdvancedTools, setShowAdvancedTools] = useState(false);
  const [activeTab, setActiveTab] = useState('scans');
  const { toast } = useToast();

  const [newScan, setNewScan] = useState({
    target: '',
    scanType: ''
  });

  const [reverseShellConfig, setReverseShellConfig] = useState({
    type: 'bash',
    host: '',
    port: '4444'
  });

  useEffect(() => {
    // Load reports from localStorage
    const storedReports = localStorage.getItem('securecore_pentest_reports');
    if (storedReports) {
      const parsed = JSON.parse(storedReports);
      setReports(parsed.map((r: any) => ({ 
        ...r, 
        createdAt: new Date(r.createdAt),
        completedAt: r.completedAt ? new Date(r.completedAt) : undefined
      })));
    }
  }, []);

  const saveReports = (newReports: PentestReport[]) => {
    localStorage.setItem('securecore_pentest_reports', JSON.stringify(newReports));
    setReports(newReports);
  };

  const createScan = () => {
    if (!newScan.target || !newScan.scanType) {
      toast({
        title: "Validation Error",
        description: "Please fill in all required fields",
        variant: "destructive"
      });
      return;
    }

    const selectedScanType = scanTypes.find(s => s.id === newScan.scanType);
    if (!selectedScanType?.passive && !consentGiven) {
      toast({
        title: "Authorization Required",
        description: "Active scans require explicit consent and authorization",
        variant: "destructive"
      });
      return;
    }

    const report: PentestReport = {
      id: Math.random().toString(36),
      target: newScan.target,
      scanType: newScan.scanType,
      status: 'pending',
      severity: 'low',
      createdAt: new Date(),
      findings: [],
      summary: ''
    };

    const updatedReports = [report, ...reports];
    saveReports(updatedReports);
    
    setNewScan({ target: '', scanType: '' });
    setIsCreatingScan(false);
    setConsentGiven(false);

    // Simulate scan execution
    setTimeout(() => runScan(report.id), 1000);

    toast({
      title: "Pentest Scan Initiated",
      description: "Security assessment has been queued",
    });
  };

  const runScan = (reportId: string) => {
    const reportIndex = reports.findIndex(r => r.id === reportId);
    if (reportIndex === -1) return;

    // Update to running
    const runningReports = [...reports];
    runningReports[reportIndex] = { ...runningReports[reportIndex], status: 'running' };
    saveReports(runningReports);

    // Simulate completion after random time
    setTimeout(() => {
      const completedReports = [...reports];
      const report = completedReports[reportIndex];
      
      // Generate mock findings based on scan type
      const mockFindings = generateMockFindings(report.scanType, report.target);
      const severity = calculateSeverity(mockFindings);
      
      completedReports[reportIndex] = { 
        ...report, 
        status: 'completed',
        completedAt: new Date(),
        findings: mockFindings,
        severity,
        summary: generateSummary(mockFindings, severity)
      };
      
      saveReports(completedReports);
      
      toast({
        title: "Pentest Scan Completed",
        description: `Security assessment for "${report.target}" has finished`,
      });
    }, Math.random() * 8000 + 5000);
  };

  const generateMockFindings = (scanType: string, target: string) => {
    const findings = [];

    switch (scanType) {
      // Nmap scans
      case 'nmap_basic':
      case 'nmap_comprehensive':
      case 'nmap_stealth':
        findings.push(
          { type: 'open_port', port: 80, service: 'HTTP', version: 'Apache 2.4.41', severity: 'low' },
          { type: 'open_port', port: 443, service: 'HTTPS', version: 'Apache 2.4.41 SSL', severity: 'low' },
          { type: 'open_port', port: 22, service: 'SSH', version: 'OpenSSH 7.9', severity: 'medium' },
          { type: 'os_detection', os: 'Linux 4.15', accuracy: '95%', severity: 'low' }
        );
        if (scanType === 'nmap_comprehensive') {
          findings.push(
            { type: 'script_result', script: 'ssl-enum-ciphers', result: 'Weak ciphers detected', severity: 'medium' },
            { type: 'script_result', script: 'http-methods', result: 'PUT method allowed', severity: 'high' }
          );
        }
        break;

      // OSINT scans
      case 'spiderfoot':
        findings.push(
          { type: 'subdomain', domain: `mail.${target}`, source: 'DNS enumeration', severity: 'low' },
          { type: 'subdomain', domain: `admin.${target}`, source: 'Certificate transparency', severity: 'medium' },
          { type: 'email_address', email: `contact@${target}`, source: 'Website scraping', severity: 'low' },
          { type: 'social_media', platform: 'LinkedIn', profile: `company/${target}`, severity: 'low' },
          { type: 'exposed_document', url: `${target}/backup.zip`, file_type: 'Backup file', severity: 'high' }
        );
        break;

      case 'recon_ng':
        findings.push(
          { type: 'whois_info', registrar: 'GoDaddy', creation_date: '2015-03-15', severity: 'low' },
          { type: 'dns_record', record_type: 'MX', value: 'mail.google.com', severity: 'low' },
          { type: 'hosting_provider', provider: 'AWS', region: 'us-east-1', severity: 'low' }
        );
        break;

      case 'metagoofil':
        findings.push(
          { type: 'metadata', file: 'document.pdf', author: 'John Doe', software: 'Adobe Acrobat', severity: 'medium' },
          { type: 'metadata', file: 'presentation.pptx', creator: 'Jane Smith', company: 'SecureCorp', severity: 'medium' }
        );
        break;

      case 'haveibeenpwned':
        findings.push(
          { type: 'breach_found', breach: 'Adobe 2013', accounts: '152M', date: '2013-10-04', severity: 'high' },
          { type: 'paste_found', source: 'Pastebin', date: '2019-03-02', severity: 'medium' }
        );
        break;

      // Web application scans
      case 'sqlmap':
        findings.push(
          { type: 'sql_injection', parameter: 'id', technique: 'Boolean-based blind', severity: 'critical' },
          { type: 'database_info', dbms: 'MySQL 5.7.34', user: 'webapp@localhost', severity: 'high' },
          { type: 'data_extraction', tables: 'users, admin, products', rows: '1,247 entries', severity: 'critical' }
        );
        break;

      // Authentication testing
      case 'hydra_ssh':
        findings.push(
          { type: 'credential_found', username: 'admin', password: 'password123', service: 'SSH', severity: 'critical' },
          { type: 'weak_credential', username: 'user', password: 'user', service: 'SSH', severity: 'high' }
        );
        break;

      case 'medusa_ftp':
        findings.push(
          { type: 'credential_found', username: 'anonymous', password: '', service: 'FTP', severity: 'medium' },
          { type: 'brute_force_success', attempts: 156, time: '2m 34s', severity: 'high' }
        );
        break;

      case 'john_crack':
      case 'hashcat_gpu':
        findings.push(
          { type: 'password_cracked', hash: 'MD5:5d41402abc4b2a76b9719d911017c592', password: 'hello', severity: 'medium' },
          { type: 'password_cracked', hash: 'NTLM:8846f7eaee8fb117ad06bdd830b7586c', password: 'password', severity: 'high' }
        );
        break;

      // Exploitation framework
      case 'metasploit_scan':
        findings.push(
          { type: 'exploit_available', cve: 'CVE-2021-44228', module: 'log4j_header_injection', severity: 'critical' },
          { type: 'payload_success', payload: 'meterpreter/reverse_tcp', access_level: 'system', severity: 'critical' }
        );
        break;

      // Network analysis
      case 'wireshark_capture':
        findings.push(
          { type: 'unencrypted_traffic', protocol: 'FTP', credentials: 'Captured', severity: 'high' },
          { type: 'suspicious_traffic', description: 'DNS tunneling detected', severity: 'medium' }
        );
        break;

      // Legacy scans for backward compatibility
      case 'ssl_check':
        findings.push(
          { type: 'ssl_cert', valid: true, expiry: '2025-12-31', severity: 'low' },
          { type: 'weak_cipher', cipher: 'TLSv1.0', severity: 'medium' }
        );
        break;

      case 'http_headers':
        findings.push(
          { type: 'missing_header', header: 'X-Frame-Options', severity: 'medium' },
          { type: 'missing_header', header: 'Content-Security-Policy', severity: 'high' }
        );
        break;

      case 'dns_enum':
        findings.push(
          { type: 'subdomain', domain: `mail.${target}`, severity: 'low' },
          { type: 'subdomain', domain: `admin.${target}`, severity: 'medium' }
        );
        break;

      case 'whois_lookup':
        findings.push(
          { type: 'whois_info', registrar: 'GoDaddy', creation_date: '2015-03-15', severity: 'low' },
          { type: 'contact_info', email: `admin@${target}`, phone: '+1-555-0123', severity: 'medium' }
        );
        break;

      case 'vulnerability_scan':
        findings.push(
          { type: 'outdated_software', software: 'Apache 2.4.29', severity: 'high' },
          { type: 'sql_injection', endpoint: '/login', severity: 'critical' }
        );
        break;

      case 'reverse_shell':
        findings.push(
          { type: 'payload_generated', payload_type: reverseShellConfig.type, severity: 'low' },
          { type: 'connection_details', host: reverseShellConfig.host, port: reverseShellConfig.port, severity: 'low' }
        );
        break;

      default:
        findings.push({ type: 'info', message: 'Scan completed successfully', severity: 'low' });
    }

    return findings;
  };

  const calculateSeverity = (findings: any[]): 'low' | 'medium' | 'high' | 'critical' => {
    if (findings.some(f => f.severity === 'critical')) return 'critical';
    if (findings.some(f => f.severity === 'high')) return 'high';
    if (findings.some(f => f.severity === 'medium')) return 'medium';
    return 'low';
  };

  const generateSummary = (findings: any[], severity: string) => {
    const count = findings.length;
    return `Scan completed with ${count} finding(s). Overall risk level: ${severity.toUpperCase()}. Review detailed findings for remediation recommendations.`;
  };

  const exportReport = (report: PentestReport) => {
    const data = JSON.stringify({
      report: {
        target: report.target,
        scanType: report.scanType,
        severity: report.severity,
        createdAt: report.createdAt,
        completedAt: report.completedAt,
        summary: report.summary
      },
      findings: report.findings
    }, null, 2);
    
    const blob = new Blob([data], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `pentest-${report.target.replace(/[^a-zA-Z0-9]/g, '-')}-${report.id}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Report Exported",
      description: "Pentest report exported successfully",
    });
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed':
        return <CheckCircle className="w-4 h-4 text-cyber-green" />;
      case 'running':
        return <div className="w-4 h-4 border-2 border-cyber-blue border-t-transparent rounded-full animate-spin" />;
      case 'failed':
        return <AlertTriangle className="w-4 h-4 text-cyber-red" />;
      default:
        return <Clock className="w-4 h-4 text-cyber-orange" />;
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical':
        return 'text-cyber-red border-cyber-red';
      case 'high':
        return 'text-cyber-orange border-cyber-orange';
      case 'medium':
        return 'text-cyber-blue border-cyber-blue';
      default:
        return 'text-cyber-green border-cyber-green';
    }
  };

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="space-y-1">
          <h1 className="text-3xl font-bold flex items-center space-x-2">
            <Target className="w-8 h-8 text-cyber-red" />
            <span>Pentest Suite</span>
          </h1>
          <p className="text-muted-foreground">Authorized security testing and vulnerability assessment</p>
        </div>
        <div className="flex items-center space-x-2">
          <Button
            variant={activeTab === 'tools' ? 'default' : 'outline'}
            onClick={() => setActiveTab(activeTab === 'tools' ? 'scans' : 'tools')}
          >
            <Settings className="w-4 h-4 mr-2" />
            {activeTab === 'tools' ? 'Back to Scans' : 'Advanced Tools'}
          </Button>
          <Dialog open={isCreatingScan} onOpenChange={setIsCreatingScan}>
            <DialogTrigger asChild>
              <Button disabled={activeTab === 'tools'}>
                <Plus className="w-4 h-4 mr-2" />
                New Scan
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Create Security Scan</DialogTitle>
                <DialogDescription>
                  Initialize a new penetration test or security assessment
                </DialogDescription>
              </DialogHeader>
              <div className="space-y-4">
                <Alert>
                  <AlertTriangle className="h-4 w-4" />
                  <AlertDescription>
                    Only scan systems you own or have explicit authorization to test. Unauthorized security testing is illegal.
                  </AlertDescription>
                </Alert>
                
                <div className="space-y-2">
                  <Label htmlFor="scan-target">Target *</Label>
                  <Input
                    id="scan-target"
                    placeholder="e.g., example.com, 192.168.1.100"
                    value={newScan.target}
                    onChange={(e) => setNewScan({...newScan, target: e.target.value})}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="scan-type">Scan Type *</Label>
                  <Select value={newScan.scanType} onValueChange={(value) => setNewScan({...newScan, scanType: value})}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select scan type" />
                    </SelectTrigger>
                    <SelectContent>
                      {scanTypes.map((scan) => (
                        <SelectItem key={scan.id} value={scan.id}>
                          <div className="flex items-center space-x-2">
                            <div className="flex-1">
                              <div className="flex items-center space-x-2 mb-1">
                                <span className="font-medium">{scan.name}</span>
                                <Badge variant={scan.passive ? "default" : "secondary"}>
                                  {scan.passive ? "Passive" : "Active"}
                                </Badge>
                                {scan.category && (
                                  <Badge variant="outline" className="text-xs">
                                    {scan.category}
                                  </Badge>
                                )}
                              </div>
                              <div className="text-xs text-muted-foreground mb-1">{scan.description}</div>
                              {scan.tools && (
                                <div className="flex flex-wrap gap-1">
                                  {scan.tools.slice(0, 3).map((tool: string) => (
                                    <Badge key={tool} variant="outline" className="text-xs px-1 py-0">
                                      {tool}
                                    </Badge>
                                  ))}
                                  {scan.tools.length > 3 && (
                                    <Badge variant="outline" className="text-xs px-1 py-0">
                                      +{scan.tools.length - 3}
                                    </Badge>
                                  )}
                                </div>
                              )}
                            </div>
                          </div>
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {newScan.scanType && !scanTypes.find(s => s.id === newScan.scanType)?.passive && (
                  <div className="space-y-3 p-4 border rounded-lg bg-destructive/5">
                    <div className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        id="consent"
                        checked={consentGiven}
                        onChange={(e) => setConsentGiven(e.target.checked)}
                        className="rounded"
                      />
                      <Label htmlFor="consent" className="text-sm">
                        I confirm that I have explicit authorization to perform active security testing on this target
                      </Label>
                    </div>
                  </div>
                )}
                
                <div className="flex justify-end space-x-2">
                  <Button variant="outline" onClick={() => setIsCreatingScan(false)}>
                    Cancel
                  </Button>
                  <Button onClick={createScan}>Create Scan</Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
          <Button variant="outline" onClick={() => setShowReverseShell(true)}>
            <Terminal className="w-4 h-4 mr-2" />
            Reverse Shell
          </Button>
        </div>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-lg">Total Scans</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-cyber-red">{reports.length}</div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-lg">Critical Findings</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-cyber-red">
              {reports.filter(r => r.severity === 'critical').length}
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-lg">High Risk</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-cyber-orange">
              {reports.filter(r => r.severity === 'high').length}
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-lg">Active Scans</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-cyber-blue">
              {reports.filter(r => r.status === 'running').length}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Advanced Tools Panel */}
      {activeTab === 'tools' && <AdvancedToolsPanel />}

      {/* Reports List */}
      {activeTab === 'scans' && (
        <Card>
        <CardHeader>
          <CardTitle>Security Reports</CardTitle>
          <CardDescription>Penetration test results and vulnerability assessments</CardDescription>
        </CardHeader>
        <CardContent>
          {reports.length === 0 ? (
            <div className="text-center py-8">
              <Shield className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
              <h3 className="text-lg font-semibold mb-2">No security scans yet</h3>
              <p className="text-muted-foreground mb-4">Start your first authorized security assessment</p>
              <Button onClick={() => setIsCreatingScan(true)}>
                <Plus className="w-4 h-4 mr-2" />
                Create First Scan
              </Button>
            </div>
          ) : (
            <div className="space-y-4">
              {reports.map((report) => {
                const scanType = scanTypes.find(s => s.id === report.scanType);
                return (
                  <div key={report.id} className="border rounded-lg p-4 space-y-3">
                    <div className="flex items-center justify-between">
                      <div className="flex-1">
                        <div className="flex items-center space-x-2">
                          <h3 className="font-semibold font-mono">{report.target}</h3>
                          <Badge variant="outline" className={getSeverityColor(report.severity)}>
                            {report.severity.toUpperCase()}
                          </Badge>
                          <Badge variant={report.status === 'completed' ? 'default' : 'secondary'}>
                            {report.status}
                          </Badge>
                        </div>
                        <p className="text-sm text-muted-foreground">
                          Scan: {scanType?.name || report.scanType}
                        </p>
                        {report.summary && (
                          <p className="text-sm text-muted-foreground mt-1">{report.summary}</p>
                        )}
                      </div>
                      <div className="flex items-center space-x-2">
                        {getStatusIcon(report.status)}
                        {report.status === 'completed' && (
                          <>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => setSelectedReport(report)}
                            >
                              <Eye className="w-4 h-4" />
                            </Button>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => exportReport(report)}
                            >
                              <Download className="w-4 h-4" />
                            </Button>
                          </>
                        )}
                        {report.status === 'pending' && (
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => runScan(report.id)}
                          >
                            <Play className="w-4 h-4" />
                          </Button>
                        )}
                      </div>
                    </div>
                    <div className="flex items-center justify-between text-xs text-muted-foreground">
                      <span>Created: {report.createdAt.toLocaleString()}</span>
                      {report.completedAt && (
                        <span>Completed: {report.completedAt.toLocaleString()}</span>
                      )}
                    </div>
                   </div>
                 );
               })}
             </div>
           )}
         </CardContent>
        </Card>
      )}

      {/* Report Details Dialog */}
      <Dialog open={!!selectedReport} onOpenChange={() => setSelectedReport(null)}>
        <DialogContent className="max-w-4xl">
          <DialogHeader>
            <DialogTitle>Security Report: {selectedReport?.target}</DialogTitle>
            <DialogDescription>
              Detailed findings and recommendations
            </DialogDescription>
          </DialogHeader>
          {selectedReport && (
            <div className="space-y-4">
              <ExploitRecommendationEngine 
                findings={selectedReport.findings}
                target={selectedReport.target}
                scanType={selectedReport.scanType}
              />
              
              <div className="space-y-3">
                <h4 className="font-semibold">Technical Findings</h4>
                {selectedReport.findings.map((finding, index) => (
                  <div key={index} className="border rounded p-3 bg-muted/50">
                    <div className="flex items-center justify-between mb-2">
                      <span className="font-medium">{finding.type.replace(/_/g, ' ').toUpperCase()}</span>
                      <Badge className={`${getSeverityColor(finding.severity)} text-xs`}>
                        {finding.severity}
                      </Badge>
                    </div>
                    <div className="text-sm text-muted-foreground">
                      {Object.entries(finding).filter(([key]) => key !== 'type' && key !== 'severity').map(([key, value]) => (
                        <div key={key} className="flex">
                          <span className="font-medium mr-2">{key}:</span>
                          <span>{String(value)}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Reverse Shell Generator */}
      <ReverseShellGenerator 
        open={showReverseShell} 
        onOpenChange={setShowReverseShell}
      />
    </div>
  );
};

export default PentestSuite;
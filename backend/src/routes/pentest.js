const express = require("express");
const router = express.Router();
const { pool } = require("../config/database");
const authMiddleware = require("../middleware/auth");

// -------------------------
// GET /api/pentest/reports
// -------------------------
router.get("/reports", authMiddleware, async (req, res) => {
  try {
    const reports = await pool.query(
      "SELECT id, target, status, created_at FROM pentest_reports ORDER BY created_at DESC"
    );
    res.json(reports.rows);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Erreur serveur" });
  }
});

// -------------------------
// GET /api/pentest/reports/:id
// -------------------------
router.get("/reports/:id", authMiddleware, async (req, res) => {
  try {
    const { id } = req.params;
    const report = await pool.query("SELECT * FROM pentest_reports WHERE id = $1", [id]);

    if (report.rows.length === 0) {
      return res.status(404).json({ error: "Rapport introuvable" });
    }

    res.json(report.rows[0]);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Erreur serveur" });
  }
});

// -------------------------
// POST /api/pentest/scan
// (lance un scan fictif pour l’instant)
// -------------------------
router.post("/scan", authMiddleware, async (req, res) => {
  try {
    const { target } = req.body;

    // Insérer en base avec statut "running"
    const result = await pool.query(
      "INSERT INTO pentest_reports (target, status, created_at) VALUES ($1, $2, NOW()) RETURNING *",
      [target, "running"]
    );

    // TODO : Lancer un vrai scan (OSINT, nmap, etc.)
    res.status(201).json({ message: "Scan lancé", report: result.rows[0] });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Erreur serveur" });
  }
});

// -------------------------
// POST /api/pentest/scan/:id/stop
// (arrête un scan en cours - mock pour l’instant)
// -------------------------
router.post("/scan/:id/stop", authMiddleware, async (req, res) => {
  try {
    const { id } = req.params;

    // Mise à jour du statut
    const result = await pool.query(
      "UPDATE pentest_reports SET status = $1 WHERE id = $2 RETURNING *",
      ["stopped", id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: "Scan introuvable" });
    }

    res.json({ message: "Scan arrêté", report: result.rows[0] });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Erreur serveur" });
  }
});

// -------------------------
// GET /api/pentest/reports/:id/export
// (export JSON du rapport - plus tard tu pourras faire PDF)
// -------------------------
router.get("/reports/:id/export", authMiddleware, async (req, res) => {
  try {
    const { id } = req.params;
    const report = await pool.query("SELECT * FROM pentest_reports WHERE id = $1", [id]);

    if (report.rows.length === 0) {
      return res.status(404).json({ error: "Rapport introuvable" });
    }

    res.setHeader("Content-Disposition", `attachment; filename=report-${id}.json`);
    res.json(report.rows[0]);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Erreur serveur" });
  }
});

module.exports = router;
